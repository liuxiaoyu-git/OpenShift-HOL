kind: BuildConfig
apiVersion: build.openshift.io/v1
metadata:
  name: tasks-pipeline
  namespace: cicd-demo-cicd
spec:
  successfulBuildsHistoryLimit: 5
  failedBuildsHistoryLimit: 5
  strategy:
    type: JenkinsPipeline
    jenkinsPipelineStrategy:
      jenkinsfile: >-
        def version, mvnCmd = "mvn -s configuration/cicd-settings-nexus3.xml"


        def oc_user = "opentlc-mgr" 


        def oc_pass = "r3dh4t1!" 


        def ocp_api = "api.cluster-6d16.6d16.sandbox1717.opentlc.com:6443" 


        def ocp_registry =
        "default-route-openshift-image-registry.apps.cluster-6d16.6d16.sandbox1717.opentlc.com"


        def quay_user = "user1" 


        def quay_pass = "openshift" 


        def quay_repo = "jboss-eap70-openshift" 


        def quay_server="quay.apps.cluster-6d16.6d16.sandbox1717.opentlc.com"


        pipeline {
          agent {
            label 'maven'
          }
          stages {
            stage('Build App') {
              steps {
                git branch: 'eap-7', url: 'http://gogs:3000/gogs/openshift-tasks.git'
                script {
                    def pom = readMavenPom file: 'pom.xml'
                    version = pom.version
                  }
                sh "${mvnCmd} install -DskipTests=true"
              }
            }
            stage('Test') {
              steps {
                sh "${mvnCmd} test"
                step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
              }
            }
            stage('Code Analysis') {
              steps {
                script {
                  sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                }
              }
            }
            stage('Archive App') {
              steps {
                sh "${mvnCmd} deploy -DskipTests=true -P nexus3"
              }
            }
            stage('Create Image Builder') {
              when {
                expression {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      return !openshift.selector("bc", "tasks").exists();
                    }
                  }
                }
              }
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      openshift.newBuild("--name=tasks", "--image-stream=jboss-eap70-openshift:1.5", "--binary=true")
                    }
                  }
                }
              }
            }
            stage('Build Image') {
              steps {
                sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                sh "cp target/openshift-tasks.war oc-build/deployments/ROOT.war"

                script {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      openshift.selector("bc", "tasks").startBuild("--from-dir=oc-build", "--wait=true")
                    }
                  }
                }
              }
            }
            stage('Create DEV') {
              when {
                expression {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      return !openshift.selector('dc', 'tasks').exists()
                    }
                  }
                }
              }
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      def app = openshift.newApp("tasks:latest")
                      app.narrow("svc").expose();

                      def dc = openshift.selector("dc", "tasks")
                      while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                          sleep 10
                      }
                      openshift.set("triggers", "dc/tasks", "--manual")
                    }
                  }
                }
              }
            }
            stage('Deploy DEV') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      openshift.selector("dc", "tasks").rollout().latest();
                    }
                  }
                }
              }
            }
            stage('Promote to STAGE?') {
              steps {
                timeout(time:15, unit:'MINUTES') {
                    input message: "Promote to STAGE?", ok: "Promote"
                }

                script {
                  openshift.withCluster() {
                    openshift.tag("${env.DEV_PROJECT}/tasks:latest", "${env.STAGE_PROJECT}/tasks:${version}")
                  }
                }
              }
            }
            stage('Deploy STAGE') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.STAGE_PROJECT) {
                      if (openshift.selector('dc', 'tasks').exists()) {
                        openshift.selector('dc', 'tasks').delete()
                        openshift.selector('svc', 'tasks').delete()
                        openshift.selector('route', 'tasks').delete()
                      }

                      openshift.newApp("tasks:${version}").narrow("svc").expose()
                    }
                  }
                }
              }
            }
            stage('Clair Container Vulnerability Scan') {
              agent {
                label 'skopeo'
              }
              steps {
                script {
                  sh "oc login -u $oc_user -p $oc_pass --insecure-skip-tls-verify https://$ocp_api 2>&1"
                  sh 'skopeo copy --src-creds="$(oc whoami):$(oc whoami -t)"' + " --src-tls-verify=false --dest-creds=$quay_user:$quay_pass --dest-tls-verify=false docker://$ocp_registry/cicd-demo-dev/tasks:latest docker://$quay_server/$quay_user/tasks:stage"
                }
              }
            }
          }
        }
      env:
        - name: DEV_PROJECT
          value: cicd-demo-dev
        - name: STAGE_PROJECT
          value: cicd-demo-stage
        - name: ENABLE_QUAY
          value: 'false'
  postCommit: {}
  source:
    type: None
  triggers:
    - type: GitHub
      github:
        secret: 3QY1TYdk
    - type: Generic
      generic:
        secret: 3QY1TYdk
  runPolicy: Serial
